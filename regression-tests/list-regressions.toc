
(add-ns rt (module "regression-tester.toc"))

(def is-1-invoke
  (reify
    Function
    (invoke [_ x]
      (= (inc 0) x))))

(def two-list (list (inc 0) (inc 1)))
(def three-list (list (inc 0) (inc 1) (inc 2)))

(defn is-1-static [x]
  (= (inc 0) x))

(defn is-1-variadic [& x]
  (let [[x] x]
    (= (inc 0) x)))

(defn f [x]
  (list (inc x)))

(defn double [x]
  (* 2 x))

(defn g [x]
  (list (double x)))

(defn test []
  (println "Checking List regressions")
  (rt/test (instance? List three-list)
           _FILE_ _LINE_)
  (rt/test (= nothing (instance? List (inc 55)))
           _FILE_ _LINE_)
  (rt/test (= "List" (type-name three-list))
           _FILE_ _LINE_)
  (rt/test (= three-list (type-args three-list))
           _FILE_ _LINE_)
  (rt/test (= 3 (count (cons (inc 0) (cons (inc 2) (cons (inc 3) empty-list)))))
           _FILE_ _LINE_)
  (rt/test (= 3 (count (conj (conj (conj (list) 3) 2) 1)))
           _FILE_ _LINE_)
  (rt/test (= three-list (conj (conj (conj (list) 3) 2) 1))
           _FILE_ _LINE_)
  (rt/test (empty? empty-list)
           _FILE_ _LINE_)
  (rt/test (empty? (list))
           _FILE_ _LINE_)
  (rt/test (= nothing (first empty-list))
           _FILE_ _LINE_)
  (rt/test (= nothing (empty? (cons 3 empty-list)))
           _FILE_ _LINE_)
  (rt/test (= (maybe "1") (first (list (subs "01" 1) (inc 1) (inc 2))))
           _FILE_ _LINE_)
  (rt/test (empty? (rest empty-list))
           _FILE_ _LINE_)
  (rt/test (empty? (rest (list (inc 0))))
           _FILE_ _LINE_)
  (rt/test (= (maybe "1") (first (rest (list 2 (subs "01" 1) 3))))
           _FILE_ _LINE_)
  (rt/test (empty? (rest (list)))
           _FILE_ _LINE_)
  (rt/test (= nothing (= three-list (inc 0)))
           _FILE_ _LINE_)
  (rt/test (= three-list three-list)
           _FILE_ _LINE_)
  (rt/test (empty? (list-concat (rest (list (inc 0)))))
           _FILE_ _LINE_)
  (rt/test (= 2 (count (list-concat (list two-list))))
           _FILE_ _LINE_)
  (rt/test (= 4 (count (list-concat (list two-list (list 3 4)))))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (list-concat (list two-list (list 3 4) (list (inc 4) (inc 5))))))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (list-concat (list two-list (list 3 4) [(inc 4) (inc 5)]))))
           _FILE_ _LINE_)
  (rt/test (= 2 (count (comp (list (inc 0) (inc 1)))))
           _FILE_ _LINE_)
  (rt/test (= 4 (count (comp (list (inc 0) (inc 1)) (list (inc 2) (inc 3)))))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (comp two-list (list 3 4) (list 5 6))))
           _FILE_ _LINE_)
  (rt/test (= 6 (count (comp two-list empty-list (list 3 4) (empty (list)) (list 5 6))))
           _FILE_ _LINE_)
  (rt/test (empty? (empty two-list))
           _FILE_ _LINE_)
  (rt/test (empty? (filter (rest (list 1)) is-1-static))
           _FILE_ _LINE_)
  (rt/test (= 1 (count (filter (list (inc 0)) is-1-static)))
           _FILE_ _LINE_)
  (rt/test (= 4 (count (filter (list (inc 0) (inc 1) 3 1 (inc 0) 5 1 (inc 5) 7)
                               (fn [x] (= (inc 0) x)))))
           _FILE_ _LINE_)
  (rt/test (= 4 (count (filter (list (inc 0) (inc 1) 3 1 (inc 0) 5 1 (inc 5) 7)
                               (fn [& x]
                                 (let [[x] x]
                                   (= (inc 0) x))))))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= 4 (count (filter (list (inc 0) (inc 1) 3 1 (inc 0) 5 1 (inc 5) 7)
                                 (reify
                                   Function
                                   (invoke [_ x]
                                     (= 1 x))))))
             _FILE_ _LINE_)
    (rt/test (= 4 (count (filter (list (inc 0) (inc 1) 3 1 (inc 0) 5 1 (inc 5) 7)
                                 (reify
                                   Function
                                   (invoke [_ x]
                                     (= inc-val x))))))
             _FILE_ _LINE_))
  (rt/test (= (list 2 3 4) (map three-list inc))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= (list 2 3 4) (map three-list (fn [x] (+ inc-val x))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= (list 2 3 4) (map three-list (fn [& xs] (let [[x] xs] (+ inc-val x)))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= (map three-list (reify
                                  Function
                                  (invoke [_ x]
                                    (+ inc-val x))))
                (list 2 3 4))
             _FILE_ _LINE_))
  (rt/test (= three-list (reverse (reverse three-list)))
           _FILE_ _LINE_)
  (rt/test (= 6 (reduce (list (inc 2) 2 1) (inc -1) +))
           _FILE_ _LINE_)
  (rt/test (= '(2) (wrap three-list (inc 1)))
           _FILE_ _LINE_)
  (rt/test (= (list 1 2 4) (flat-map '(0 1 3) (fn [x] (list (inc x)))))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (nth '((inc 0) 2 3) (inc 0)))
           _FILE_ _LINE_)
  (rt/test (= nothing (nth '(1 2 (inc 2)) (inc 2)))
           _FILE_ _LINE_)
  (rt/test (= (maybe 3) (last (list (inc 0) 2 (inc 2))))
           _FILE_ _LINE_)
  (rt/test (= nothing (last empty-list))
           _FILE_ _LINE_)
  (rt/test (= [1 2 3] (vec three-list))
           _FILE_ _LINE_)
  (rt/test (= (list 1 2 3 4) (comp (list (inc 0) 2) [(inc 2) (inc 3)]))
           _FILE_ _LINE_)
  (rt/test (= nothing (= (list 1 2 3) (list 0 1 2)))
           _FILE_ _LINE_)
  (rt/test (= nothing (= (list 1 2 3) (list 1 2 2)))
           _FILE_ _LINE_)
  (rt/test (= empty-list (let [x (inc 0)]
                           (filter empty-list (fn [y] (= x y)))))
           _FILE_ _LINE_)
  (rt/test (= empty-list (list* empty-list))
           _FILE_ _LINE_)
  (rt/test (= empty-list (apply list*))
           _FILE_ _LINE_)
  (rt/test (= empty-list (apply list* empty-list))
           _FILE_ _LINE_)
  (rt/test (= '(1 2 3) (list* (inc 0) (inc 1) (inc 2) empty-list))
           _FILE_ _LINE_)
  (rt/test (= '(1 2 3 4 5) (list* (inc 0) (inc 1) (inc 2) (list (inc 3) (inc 4))))
           _FILE_ _LINE_)
  (rt/test (= '(1 2 3) (apply list* (list (inc 0) (inc 1) (inc 2) empty-list)))
           _FILE_ _LINE_)
  (rt/test (= '(1 2 3 4 5) (apply list* (list (inc 0) (inc 1) (inc 2) (list (inc 3) (inc 4)))))
           _FILE_ _LINE_)
  (rt/test (= '(3 4 5) (drop (list (inc 0) 2 (inc 2) (inc 3) 5) 2))
           _FILE_ _LINE_)
  (rt/test (= '() (drop (list (inc 0) 2 (inc 2) (inc 3) 5) 10))
           _FILE_ _LINE_)
  (rt/test (= '(1 2 3 4 5) (drop (list (inc 0) 2 (inc 2) (inc 3) 5) 0))
           _FILE_ _LINE_)

  (rt/test (= (map (list (inc 11)) (fn [x] x)) (list (inc 11)))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= (map (map (list (inc 1)) (fn [x] (+ inc-val x))) double)
                (map (list (inc 1)) (fn [x] (double (+ inc-val x)))))
             _FILE_ _LINE_))

  (rt/test (= (map (list (inc 11)) list) (list (list (inc 11))))
           _FILE_ _LINE_)
  (rt/test (= (flat-map (list (inc 7)) list) (list (inc 7)))
           _FILE_ _LINE_)
  (rt/test (= (flat-map (list 4) f) (f 4))
           _FILE_ _LINE_)
  (rt/test (= (list 10)
              (flat-map (flat-map (list 4) f) g)
              (flat-map (list 4) (fn [x] (flat-map (f x) g))))
           _FILE_ _LINE_)
  (rt/test (empty? (butlast '()))
           _FILE_ _LINE_)
  (rt/test (= '(1) (butlast (list (inc 0) (inc 2))))
           _FILE_ _LINE_)

  (rt/test (= empty-list (apply* (list list) empty-list))
           _FILE_ _LINE_)
  (rt/test (= empty-list (apply-to inc empty-list))
           _FILE_ _LINE_)
  (rt/test (= (list 2 3 4) (apply-to inc (list 1 2 3)))
           _FILE_ _LINE_)
  (rt/test (= (list 11 12 13 31 32 33) (apply-to + (list 1 2 (inc 2)) [10 30]))
           _FILE_ _LINE_)
  (rt/test (= empty-list (apply-to + '(1 2 (inc 2)) empty-list [10 20 30]))
           _FILE_ _LINE_)
  (rt/test (= '(2) (flat-map (list (inc 1)) vector))
           _FILE_ _LINE_)

  (println "Lists are good"))

