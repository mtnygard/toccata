
(add-ns rt (module "regression-tester.toc"))

(defn add-1-variadic [& x]
  (let [[x] x]
    (+ 1 x)))

(def m-val (maybe "poke"))

(defn test []
  (println "Check Maybe regressions")
  (rt/test (= "Maybe" (type-name nothing))
           _FILE_ _LINE_)
  (rt/test (instance? Maybe nothing)
           _FILE_ _LINE_)
  (rt/test (= "Maybe" (type-name (maybe (inc 1))))
           _FILE_ _LINE_)
  (rt/test (instance? Maybe (maybe (inc 8)))
           _FILE_ _LINE_)
  (rt/test (= 2 (extract (maybe (inc 1))))
           _FILE_ _LINE_)
  (rt/test (= [2] (type-args (maybe (inc 1))))
           _FILE_ _LINE_)
  (rt/test (= [] (type-args nothing))
           _FILE_ _LINE_)
  (rt/test m-val
           _FILE_ _LINE_)
  (rt/test (= (maybe 'yep) (and m-val (maybe 'yep)))
           _FILE_ _LINE_)
  (rt/test (= nothing (and nothing m-val))
           _FILE_ _LINE_)
  (rt/test (= nothing (and m-val nothing))
           _FILE_ _LINE_)
  (rt/test (or nothing m-val)
           _FILE_ _LINE_)
  (rt/test (or m-val nothing)
           _FILE_ _LINE_)
  (rt/test (= (maybe (inc 2)) (maybe (inc 2)))
           _FILE_ _LINE_)
  (let [x (inc 2)]
    (rt/test (= (maybe x) (maybe x))
             _FILE_ _LINE_))
  (rt/test (= nothing nothing)
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (map (maybe (inc 0)) inc))
           _FILE_ _LINE_)
  (rt/test (= (list 1) ((maybe (inc 7)) (list 1) (list 2)))
           _FILE_ _LINE_)
  (rt/test (= (list 2) (nothing (list 1) (list 2)))
           _FILE_ _LINE_)
  (rt/test (= nothing (and (apply* nothing (maybe (inc 0)))))
           _FILE_ _LINE_)
  (rt/test (= nothing (apply* nothing (list (maybe (inc 0)) (maybe (inc 1)))))
           _FILE_ _LINE_)
  (rt/test (= nothing (apply-to inc nothing))
           _FILE_ _LINE_)
  (rt/test (= nothing (= (maybe 2) (apply-to inc (maybe (inc 0)) nothing)))
           _FILE_ _LINE_)
  (rt/test (= nothing (apply nothing (maybe (inc 0))))
           _FILE_ _LINE_)
  (rt/test (= nothing (apply-to + (maybe 8) nothing (maybe 13)))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (apply* (maybe inc) (list (maybe (inc 0)))))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (apply-to add-1-variadic (maybe (inc 0))))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (apply* (maybe (fn [] 2)) empty-list))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (apply* (maybe (fn [& _] 2)) empty-list))
           _FILE_ _LINE_)
  (rt/test (= (maybe 3) (apply* (maybe +) (list (maybe (inc 1)) (maybe (inc 0)))))
           _FILE_ _LINE_)
  (let [inc-val (inc 0)]
    (rt/test (= nothing (flat-map nothing (fn [x]
                                            (maybe (+ inc-val x)))))
             _FILE_ _LINE_))
  (let [inc-val (inc 0)]
    (rt/test (= (maybe 2) (flat-map (maybe (inc 0)) (fn [x]
                                                      (maybe (+ inc-val x)))))
             _FILE_ _LINE_))
  (let [l (list 33)]
    (flat-map nothing
              (fn [h]
                (list l)
                (println "fail in!!" _FILE_ _LINE_)
                (abort))))

  (let [l (list 22)]
    (flat-map (maybe (inc 0))
              (fn [h]
                l
                h
                (maybe 8))))

  (let [double (fn [x]
                 (+ x x))
        check-int (fn [x]
                    (and (= 0 (rem x 2))
                         (maybe x)))]
    ;; check the functor and applicative laws for maybe
    (rt/test (= (map (maybe 5) (fn [x] x)) (maybe 5))
             _FILE_ _LINE_)
    (rt/test (= (map (map (maybe 2) inc) double)
                (map (maybe 2) (fn [x]
                                 (double (inc x)))))
             _FILE_ _LINE_)
    (rt/test (= (map (maybe 5) inc)
                (apply-to inc (maybe 5)))
             _FILE_ _LINE_)
    (rt/test (= (maybe 5) (apply-to (fn [x] x) (maybe 5)))
             _FILE_ _LINE_)
    (let [v1 (maybe "first ")
          v2 (maybe "second ")
          v3 (maybe "third")]
      (rt/test (= (apply-to comp (apply-to comp v1 v2) v3)
                  (apply-to comp v1 (apply-to comp v2 v3))
                  (apply-to comp v1 v2 v3))
               _FILE_ _LINE_))
    ;; check the functor and applicative laws for nothing
    (rt/test (= (map nothing (fn [x] x)) nothing)
             _FILE_ _LINE_)
    (rt/test (= (map (map nothing inc) double)
                (map nothing (fn [x]
                               (double (inc x)))))
             _FILE_ _LINE_)
    (rt/test (= (map nothing inc)
                (apply-to inc nothing))
             _FILE_ _LINE_)
    (rt/test (= (apply-to comp (apply-to comp nothing nothing) nothing)
                (apply-to comp nothing (apply-to comp nothing nothing))
                (apply-to comp nothing nothing nothing))
             _FILE_ _LINE_)

    ;; nothing in action
    (let [good-ints (map (list 8 10 2 4 14) check-int)
          nothing-ints (map (list 8 3 2 5 14) check-int)]
      (rt/test (apply* (maybe +) good-ints)
               _FILE_ _LINE_)
      (and (apply* (maybe +) nothing-ints)
           _FILE_ _LINE_)))

  (let [max-n (+ (inc 0) (inc 0))
        cnt (count [1 2 3])
        len ((<  max-n cnt) max-n cnt)]
    len)

  (let [inc-val (inc 0)
        f (reify
            Function
            (invoke [_ x]
              (+ inc-val x 2)))]
    (rt/test (= nothing (map nothing (fn [x]
                                       (+ inc-val x))))
             _FILE_ _LINE_)
    (rt/test (= (maybe 4) (map (maybe (inc 0)) f))
             _FILE_ _LINE_)
    (rt/test (= (maybe 2) (map (maybe (inc 0)) (reify
                                                 Function
                                                 (invoke [_ x]
                                                   (+ inc-val x)))))
             _FILE_ _LINE_)
    (rt/test (= (maybe 3) (flat-map (maybe 1) (reify
                                                Function
                                                (invoke [_ x]
                                                  (maybe (+ inc-val x inc-val))))))
             _FILE_ _LINE_)
    (rt/test (= (maybe 2) (map (maybe (inc 0)) (fn [& xs]
                                                 (let [[x] xs]
                                                   (+ x inc-val)))))
             _FILE_ _LINE_))
  (rt/test (= (maybe 2) (flat-map (maybe (inc 0)) (reify
                                                    Function
                                                    (invoke [_ x]
                                                      (maybe (inc x))))))
           _FILE_ _LINE_)
  (rt/test (= (maybe 2) (flat-map (maybe (inc 0)) (fn [& xs]
                                                    (let [[x] xs]
                                                      (maybe (inc x))))))
           _FILE_ _LINE_)

  ;; check the monad laws for maybe
  (let [f (fn [x]
            (maybe (inc x)))
        double (fn [x]
                 (+ x x))
        g (fn [x]
            (maybe (double x)))]
    (rt/test (= (flat-map (maybe (inc 7)) maybe) (maybe (inc 7)))
             _FILE_ _LINE_)
    (rt/test (= (flat-map (maybe 4) f) (f 4))
             _FILE_ _LINE_)
    (rt/test (= (maybe 10)
                (flat-map (flat-map (maybe 4) f) g)
                (flat-map (maybe 4) (fn [x] (flat-map (f x) g))))
             _FILE_ _LINE_))
  (println "Maybe is good"))
