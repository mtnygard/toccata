(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "856857e"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "cfa630d"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "1616a3a"))
(add-ns sys (git-dependency "https://github.com/Toccata-Lang/system.git"
                            "system.toc"
                            :sha "956a8bb"))
(add-ns sm (git-dependency "https://github.com/Toccata-Lang/state-maybe.git"
                           "state-maybe.toc"
                           :sha "b41dd1d"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "e67c808"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "8aabae3"))

(inline C "

#include <stdio.h>

#include <llvm-c/Core.h>
#include <llvm-c/Analysis.h>
#include <llvm-c/ExecutionEngine.h>
#include <llvm-c/Target.h>

Value* wrap(void* ptr, Destructor destruct) {
    if(ptr) {
        return maybe((List *)NULL, (Value *)NULL, opaqueValue(ptr, destruct));
    } else {
        return nothing;
    }
}

typedef struct {
    Vector* originalVector;
    void* contents[];
} nakedVector;

void freeVectorContents(void* val) {
    nakedVector* vec = (nakedVector*)val;
    for(int i = 0; i < vec->originalVector->count; i++) {
        dec_and_free(vec->contents[i], 1);
    }
    dec_and_free((Value*)(vec->originalVector), 1);
    free(vec);
}

/* Return array of pointers to the opaque values' contents from the vector.
   Passing a vector of anything other than Opaque is undefined.
*/
Value* vectorContents(Vector* vec) {
    nakedVector* result = malloc(sizeof(Value*) + (sizeof(void*) * vec->count));

    if (!result) {
        return NULL;
    }

    incRef((Value*)vec, 1);
    result->originalVector = vec;
    for(unsigned int i = 0; i < vec->count; i++) {
        /* Copied from vectorGet in core.c */
        Value *val = vectGet(vec, i);
        incRef(val, 1);
        result->contents[i] = ((Opaque*)val)->ptr;
    }

    return (Value*)opaqueValue(result, &freeVectorContents);
}

void destroy_llvm_context(void *ctx) {
    if(ctx) {
        printf(\"Disposing context: %p\\n\", ctx);
        LLVMContextDispose((LLVMContextRef)ctx);
    }
}

void dispose_llvm_module(void *module) {
    if (module) {
        printf(\"Disposing module: %p\\n\", module);
        LLVMDisposeModule((LLVMModuleRef)module);
    }
}
")

(defn llvm-context-create []
    (inline C Maybe "
        LLVMContextRef ctx = LLVMContextCreate();
        return wrap(ctx, &destroy_llvm_context);
    "))

(defn llvm-context-create-module [context name]
    (inline C Maybe "
        LLVMContextRef ctx = ((Opaque*)context_0)->ptr;
        String* nameStr = nullTerm(name_1);
        printf(\"Context ref in create-module: %p\\n\", ctx);
        LLVMModuleRef mod = LLVMModuleCreateWithNameInContext(nameStr->buffer, ctx);

        dec_and_free((Value *)nameStr, 1);

        return wrap(mod, &dispose_llvm_module);
    "))

(defn llvm-verify-module [mod]
    (inline C Maybe "
        LLVMModuleRef mod = ((Opaque*)mod_0)->ptr;
        char *error = NULL;
        LLVMVerifyModule(mod, LLVMAbortProcessAction, &error);
        Value* err = stringValue(error);
        LLVMDisposeMessage(error);
        return wrap(err, NULL);
    "))


(defn llvm-create-builder []
    (inline C Maybe "
        return wrap(LLVMCreateBuilder(), NULL);
    "))

(defn llvm-position-builder-at-end [builder block]
    (inline C Maybe "
        LLVMBuilderRef builder = ((Opaque*)builder_0)->ptr;
        LLVMBasicBlockRef bb = ((Opaque*)block_1)->ptr;
        LLVMPositionBuilderAtEnd(builder, bb);
        dec_and_free(block_1, 1);
        return builder_0;
    "))

(defn llvm-build-add [builder param1 param2 name]
    (inline C Maybe "
        LLVMBuilderRef builder = ((Opaque*)builder_0)->ptr;
        LLVMValueRef p1 = ((Opaque*)param1_1)->ptr;
        LLVMValueRef p2 = ((Opaque*)param2_2)->ptr;
        String* nameStr = nullTerm(name_3);
        LLVMValueRef v = LLVMBuildAdd(builder, p1, p2, nameStr->buffer);
        dec_and_free(builder_0, 1);
        dec_and_free(param1_1, 1);
        dec_and_free(param2_2, 1);
        dec_and_free((Value*)nameStr, 1);
        return wrap(v, NULL);
    "))

(defn llvm-build-ret [builder v]
    (inline C Maybe "
        LLVMBuilderRef builder = ((Opaque*)builder_0)->ptr;
        LLVMValueRef v = ((Opaque*)v_1)->ptr;
        LLVMBuildRet(builder, v);
        dec_and_free(v_1, 1);
        return builder_0;
    "))

;; types are all LLVMTypeRef
;; param-types - vector of Opaque[type]
;; returns maybe[LLVMValueRef] where the value is a FunctionRef
(defn llvm-add-function [module name param-types return-type]
    (inline C Maybe "
        LLVMModuleRef module = ((Opaque*) module_0)->ptr;
        String* nameStr = nullTerm(name_1);

        Value* typesVecVal = vectorContents((Vector*)param_types_2);
        nakedVector* typesVec = ((Opaque*)typesVecVal)->ptr;
        LLVMTypeRef* paramTypes = (LLVMTypeRef*)typesVec->contents;
        int paramCount = typesVec->originalVector->count;

        printf(\"type count in add-function: %d\\n\", paramCount);

        for(int i = 0; i < paramCount; i++) {
            printf(\"Type ref in add-function: %d = %p\\n\", i, paramTypes[i]);
        }

        LLVMTypeRef returnType = ((Opaque*) return_type_3)->ptr;
        LLVMTypeRef functionType = LLVMFunctionType(returnType, paramTypes, paramCount, 0);
        LLVMValueRef newFunction = LLVMAddFunction(module, nameStr->buffer, functionType);

        dec_and_free(typesVecVal, 1);
        dec_and_free(module_0, 1);
        dec_and_free((Value*) nameStr, 1);
        dec_and_free(param_types_2, 1);
        dec_and_free(return_type_3, 1);

        return wrap(newFunction, NULL);
    "))

(defn llvm-get-param [fdef idx]
    (inline C Maybe "
        LLVMValueRef fn = ((Opaque*)fdef_0)->ptr;
        int64_t idx = ((Integer*)idx_1)->numVal;
        LLVMValueRef param = LLVMGetParam(fn, idx);
        dec_and_free(idx_1, 1);
        dec_and_free(fdef_0, 1);
        return wrap(param, NULL);
    "))

(defn llvm-append-basic-block [fn name]
    (inline C Maybe "
        LLVMValueRef function = ((Opaque*)fn_0)->ptr;
        String* nameStr = nullTerm(name_1);

        LLVMBasicBlockRef bb = LLVMAppendBasicBlock(function, nameStr->buffer);

        dec_and_free((Value *)nameStr, 1);
        dec_and_free(fn_0, 1);

        return wrap(bb, NULL);
    "))

(defn llvm-link-in-interpreter []
    (inline C Integer "LLVMLinkInInterpreter();"))

(defn llvm-initialize-all-target-infos []
    (inline C "LLVMInitializeAllTargetInfos(); return integerValue(1);"))

(defn llvm-initialize-native-target []
    (inline C "
        if (0 == LLVMInitializeNativeTarget()) {
            return maybe((List *)0, (Value *)0, integerValue(1));
        } else {
            return nothing;
        }"))

(defn llvm-initialize-native-asm-parser []
    (inline C "
        if (0 == LLVMInitializeNativeAsmParser()) {
            return maybe((List *)0, (Value *)0, integerValue(1));
        } else {
            return nothing;
        }"))

(defn llvm-initialize-native-asm-printer []
    (inline C "
        if (0 == LLVMInitializeNativeAsmPrinter()) {
            return maybe((List *)0, (Value *)0, integerValue(1));
        } else {
            return nothing;
        }"))

(defn llvm-initialize-native-disassembler []
    (inline C "
        if (0 == LLVMInitializeNativeDisassembler()) {
            return maybe((List *)0, (Value *)0, integerValue(1));
        } else {
            return nothing;
        }"))

(defn list-targets []
  (inline C List "
    List *output = empty_list;
    Value *item;
    LLVMTargetRef target = LLVMGetFirstTarget();

    if (target == NULL) {
        printf(\"Really? No targets? Not one little letter?\\n\");
    }

    while (target != NULL) {
        char* targetName = LLVMGetTargetName(target);

        if (targetName != NULL) {
            output = listCons(stringValue(targetName), output);
        }

        target = LLVMGetNextTarget(target);
    }

    return (Value*)output;"))

(defn llvm-get-default-target-triple []
    (inline C  "return stringValue(LLVMGetDefaultTargetTriple());"))

(defn llvm-int64-type [context]
  (inline C "
    LLVMContextRef ctx = ((Opaque*)context_0)->ptr;
    LLVMTypeRef type = LLVMInt64TypeInContext(ctx);
    printf(\"Type ref int64 finder: %p\\n\", type);
    dec_and_free(context_0, 1);
    return opaqueValue(type, NULL);
    "))

(defn llvm-int32-type [context]
  (inline C "
    LLVMContextRef ctx = ((Opaque*)context_0)->ptr;
    LLVMTypeRef type = LLVMInt32TypeInContext(ctx);
    printf(\"Type ref int32 finder: %p\\n\", type);
    dec_and_free(context_0, 1);
    return opaqueValue(type, NULL);
    "))


(defn dump-module [v]
  (inline C "
    LLVMDumpModule(((Opaque*)v_0)->ptr);
    dec_and_free(v_0, 1);
    return nothing;
    "))

(defn dump-value [v]
  (inline C "
    LLVMDumpValue(((Opaque*)v_0)->ptr);
    dec_and_free(v_0, 1);
    return nothing;
    "))

(main [& args]
    (llvm-initialize-all-target-infos)

    (println "Available targets: " (list-targets))

    (or
        (and 
            (llvm-initialize-native-target)
            (llvm-initialize-native-asm-parser)
            (llvm-initialize-native-asm-printer)
            (llvm-initialize-native-disassembler))
        (println "Cannot initialize native target"))

    (let [llvm    (llvm-context-create)
          int32   (llvm-int32-type (extract llvm))
          mod     (llvm-context-create-module (extract llvm) "foo")
          fdef    (llvm-add-function (extract mod) "foofn" [int32 int32] int32)
          entry   (llvm-append-basic-block (extract fdef) "entry")
          builder (llvm-create-builder)
          _       (llvm-position-builder-at-end (extract builder) (extract entry))
          v       (llvm-build-add (extract builder) 
                        (extract (llvm-get-param (extract fdef) 0)) 
                        (extract (llvm-get-param (extract fdef) 1)) 
                        "sum")
          _ (llvm-build-ret (extract builder) (extract v))]
        (dump-module (extract mod))
        (llvm-verify-module (extract mod))
        )
    

;        (println "llvm has value?" (and llvm "yes"))
;        (println "module has value?" (and x "yes"))
;        (println "function has value?" (and f "yes"))
;



        ;(codegen (ConstInt 12345) (extract llvm) x)

        (println "This is the day"))

