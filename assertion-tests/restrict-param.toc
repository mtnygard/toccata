
(deftype OneType [x]
  Stringable
  (string-list [_] (list "<OneType " (str x) ">")))

(deftype AnotherType [x z]
  Stringable
  (string-list [_] (list "<AnotherType " (str z) ">")))

(def BothTypes (comp OneType
                     AnotherType))

(defn only-one [x]
  (assert (instance? OneType x))
  x)

(defn bad [x]
  (assert (instance? BothTypes x))
  (only-one x))

(main [_]
      (println (bad (AnotherType 'x 'z)))
      (println 'FAIL!!!))
